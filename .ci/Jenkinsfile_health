@Library("jenlib") _

import com.cloudbees.groovy.cps.NonCPS
import org.jenkinsci.plugins.workflow.steps.FlowInterruptedException


class HXCubeWing implements Serializable {
	int hxcubeId
	int fpgaId
	WorkflowScript pipeline
	private Integer cachedChipRevision = null

	HXCubeWing(pipeline, int hxcubeId, int fpgaId) {
		this.pipeline = pipeline
		this.hxcubeId = hxcubeId
		this.fpgaId = fpgaId
	}

	@NonCPS
	int getWaferId() {
		return hxcubeId + 60
	}

	int getChipRevision() {
		if (cachedChipRevision != null) {
			return cachedChipRevision
		}

		String hwdbQuery = "import pyhwdb; " +
		                   "db = pyhwdb.database(); " +
		                   "db.load(db.get_default_path()); " +
		                   "print(db.get_hxcube_setup_entry(${hxcubeId}).fpgas[${fpgaId}].wing.chip_revision)"
		pipeline.inSingularity(app: "dls-core") {
			pipeline.withModules(modules: ["hwdb_bss2"]) {
				cachedChipRevision = pipeline.jesh(script: "python -c '${hwdbQuery}'",
				                                   returnStdout: true).trim().toInteger()
			}
		}
		return cachedChipRevision
	}

	@NonCPS
	String toString() {
		return (String) "HXCube${hxcubeId}F${fpgaId}"
	}
}


try {
	// TODO: this should come from hwdb (Issue #3571)
	List<HXCubeWing> setups = []
	if (!isTriggeredByGerrit()) {
		setups += [
				new HXCubeWing(this, 2, 0),
				new HXCubeWing(this, 2, 3),
				new HXCubeWing(this, 3, 3),
				new HXCubeWing(this, 5, 3),
				new HXCubeWing(this, 8, 3),
				new HXCubeWing(this, 9, 3),
				new HXCubeWing(this, 10, 3),
				new HXCubeWing(this, 12, 3),
				new HXCubeWing(this, 13, 3),
				new HXCubeWing(this, 14, 3),
				new HXCubeWing(this, 15, 3)
		]
	}

	Map<String, Closure> parallelTests = [:]
	Map<HXCubeWing, Boolean> success = [:]

	for (HXCubeWing setup : setups) {
		HXCubeWing setup_local = setup
		parallelTests[setup_local.toString()] = {
			try {
				// no timeout for Gerrit-triggered jobs
				conditionalTimeout(enable: !isTriggeredByGerrit(), time: 5, unit: "MINUTES") {
					onSlurmResource(partition: "cube", wafer: setup_local.waferId, "fpga-without-aout": setup_local.fpgaId) {
						try {
							timeout(time: 30, unit: "SECONDS") {
								success[setup_local] = jesh(script: "python bin/dlens_health_check_vx_v${setup_local.chipRevision}.py",
								                            returnStatus: true) == 0
							}
						} catch (FlowInterruptedException ignored) {
							success[setup_local] = false
						}
					}
				}
			} catch (FlowInterruptedException ignored) {
				echo "Setup ${setup_local} not free for 5 minutes, aborting."
			}
		}
	}

	try {
		// no timeout for Gerrit-triggered jobs
		// enforce finished job in less than an hour in order to only have one running at a time
		conditionalTimeout(enable: !isTriggeredByGerrit(), time: 50, unit: "MINUTES") {
			withCcache() {
				wafDefaultPipeline(container: [app: "dls-core"],
				                   projects: ["haldls"],
				                   notificationChannel: "#jenkins-trashbin")
			}

			stage("Execute checks") {
				inSingularity(app: "dls-core") {
					withModules(modules: ["localdir"]) {
						parallel parallelTests
					}
				}
			}

			stage("Deploy result") {
				String result = compileHtml(setups, success)
				currentBuild.description = result
				setJobDescription(result)
			}

			if (success.any { key, value -> !value }) {
				setBuildState(state: "UNSTABLE", reason: "Not all tested setups are OK.")
			}
		}
	} catch (FlowInterruptedException ignored) {
		setBuildState(state: "ABORTED", reason: "Overall pipeline execution time too long, aborted.")
	}
} catch (Throwable t) {
	notifyFailure(mattermostChannel: "#dls-software")
	throw t
}


/**
 * Compile html-based table of check results.
 * @param setups List of setups
 * @param success Map of setup check success values
 * @return String containing compiled html document
 */
static String compileHtml(List<HXCubeWing> setups, Map<HXCubeWing, Boolean> success) {
	// Manual building of styles instead of using css classes since they are considered unsafe
	// and ignored.
	String entry_style = "border-color:black;" +
	                     "border-style:solid;" +
	                     "border-width:1px;" +
	                     "font-family:Arial, sans-serif;" +
	                     "font-size:14px;" +
	                     "font-weight:normal;" +
	                     "overflow:hidden;" +
	                     "padding:10px 5px;" +
	                     "word-break:normal;"
	String content = ""
	for (HXCubeWing setup : setups) {
		content += "<tr>\n"
		content += "<td style=\"${entry_style}text-align:center;vertical-align:top\">${setup}</td>"
		if (success.containsKey(setup)) {
			if (success[setup]) {
				content += "<td style=\"${entry_style}background-color:#32cb00;" +
				           "text-align:left;vertical-align:top\">OK</td>"
			} else {
				content += "<td style=\"${entry_style}background-color:#fe0000;" +
				           "text-align:left;vertical-align:top\">broken</td>"
			}
		} else {
			content += "<td style=\"${entry_style}background-color:#f8ff00;text-align:left;" +
			           "vertical-align:top\">not tested</td>"
		}
		content += "</tr>"
	}

	String result = """
<table style="border-collapse:collapse;border-spacing:0;">
<thead>
<tr>
<th style="${entry_style}text-align:center">Setup</th>
<th style="${entry_style}text-align:center">State</th>
</tr>
</thead>
${content}
</table>
"""
	return result
}
