@Library("jenlib") _

import com.cloudbees.groovy.cps.NonCPS
import org.jenkinsci.plugins.workflow.steps.FlowInterruptedException
import hudson.AbortException


class HXCubeWing implements Serializable {
	static final int GERRIT_HXCUBE_ID = 2

	int hxcubeId
	int fpgaId
	int chipRevision
	Integer fpgaBitfileVersion = null
	String fpgaBitfileBuildTime = null

	HXCubeWing(int hxcubeId, int fpgaId, int chipRevision) {
		this.hxcubeId = hxcubeId
		this.fpgaId = fpgaId
		this.chipRevision = chipRevision
	}

	@NonCPS
	int getWaferId() {
		return hxcubeId + 60
	}

	static List<HXCubeWing> getAllSetups(WorkflowScript pipeline) {
		String hwdbQuery = "import pyhwdb\n" +
		                   "db = pyhwdb.database()\n" +
		                   "db.load(db.get_default_path())\n" +
		                   "for cube_id in db.get_hxcube_ids():\n" +
		                   "    cube = db.get_hxcube_setup_entry(cube_id)\n" +
		                   "    for fpga_id in cube.fpgas:\n" +
		                   "        wing = cube.fpgas[fpga_id].wing\n" +
		                   "        if wing is not None:\n" +
		                   "            print(f\"{cube_id},{fpga_id},{wing.chip_revision}\")\n"
		String hwdbResult = null
		pipeline.inSingularity(app: "dls-core") {
			pipeline.withModules(modules: ["hwdb_bss2"]) {
				pipeline.runOnSlave(label: "frontend") {
					hwdbResult = pipeline.jesh(script: "python -c '${hwdbQuery}'", returnStdout: true).trim()
				}
			}
		}
		return parseHwdbQueryResult(hwdbResult)
	}

	@NonCPS
	String toString() {
		return (String) "HXCube${hxcubeId}F${fpgaId}"
	}

	@NonCPS
	private static List<HXCubeWing> parseHwdbQueryResult(String queryResult) {
		List<HXCubeWing> allSetups = []
		queryResult.eachLine { line ->  // Iterable.eachLine must not be CPS transformed
			// Rolled-out assignment is a workaround for JENKINS-55001
			List<String> results = line.tokenize(",")
			int cubeId = results[0].toInteger()
			int fpgaId = results[1].toInteger()
			int chipRevision = results[2].toInteger()
			allSetups.add(new HXCubeWing(cubeId, fpgaId, chipRevision))
		}
		return allSetups
	}
}

static int readBitfileVersion(WorkflowScript pipeline) {
	String query = "import yaml\n" +
	               "from pyhxcomm_vx import ManagedConnection\n" +
	               "with ManagedConnection() as connection:\n" +
	               "    bitfile_info = yaml.safe_load(connection.bitfile_info)\n" +
	               "    print(bitfile_info[\"version\"])"
	return pipeline.jesh(script: "python -c '${query}'", returnStdout: true).trim().toInteger()
}

static String readBitfileBuildTime(WorkflowScript pipeline) {
	String query = "import yaml\n" +
	               "from pyhxcomm_vx import ManagedConnection\n" +
	               "with ManagedConnection() as connection:\n" +
	               "    bitfile_info = yaml.safe_load(connection.bitfile_info)\n" +
	               "    print(bitfile_info[\"build_time\"].strftime(\"%Y-%m-%d %H:%M\"))"
	return pipeline.jesh(script: "python -c '${query}'", returnStdout: true).trim()
}

try {
	List<HXCubeWing> setups = []
	if (!isTriggeredByGerrit()) {
		setups += HXCubeWing.getAllSetups(this)
	}

	Map<String, Closure> parallelTests = [:]
	Map<HXCubeWing, Boolean> success = [:]

	for (HXCubeWing setup : setups) {
		HXCubeWing setup_local = setup
		parallelTests[setup_local.toString()] = {
			try {
				// no timeout for Gerrit-triggered jobs
				conditionalTimeout(enable: !isTriggeredByGerrit(), time: 5, unit: "MINUTES") {
					onSlurmResource(partition: "cube", wafer: setup_local.waferId, "fpga-without-aout": setup_local.fpgaId) {
						if (setup_local.hxcubeId == setup_local.GERRIT_HXCUBE_ID) {
							configureHxCubeBitfile()
						}

						try {
							timeout(time: 90, unit: "SECONDS") {
								success[setup_local] = jesh(script: "stadls_hwtest_vx_v${setup_local.chipRevision} --gtest_filter='-FPGADeviceDNA.Read'",
								                            returnStatus: true) == 0
								try {
									setup_local.fpgaBitfileVersion = readBitfileVersion(this)
									setup_local.fpgaBitfileBuildTime = readBitfileBuildTime(this)
								} catch (AbortException ignored) {
									success[setup_local] = false
								}
							}
						} catch (FlowInterruptedException ignored) {
							success[setup_local] = false
						}
					}
				}
			} catch (FlowInterruptedException ignored) {
				echo "Setup ${setup_local} not free for 5 minutes, aborting."
			}
		}
	}

	try {
		// no timeout for Gerrit-triggered jobs
		// enforce finished job in less than an hour in order to only have one running at a time
		conditionalTimeout(enable: !isTriggeredByGerrit(), time: 110, unit: "MINUTES") {
			withCcache() {
				wafDefaultPipeline(container: [app: "dls-core"],
				                   moduleOptions: [modules: ["ppu-toolchain"]],
				                   projects: ["haldls"],
				                   configureInstallOptions: "--build-profile=ci --disable-doxygen",
				                   notificationChannel: "#jenkins-trashbin")
			}

			stage("Execute checks") {
				inSingularity(app: "dls-core") {
					withModules(modules: ["localdir"]) {
						parallel parallelTests
					}
				}
			}

			stage("Deploy result") {
				String result = compileHtml(setups, success)
				currentBuild.description = result
				setJobDescription(result)
			}

			if (success.any { key, value -> !value }) {
				setBuildState(state: "UNSTABLE", reason: "Not all tested setups are OK.")
			}
		}
	} catch (FlowInterruptedException ignored) {
		setBuildState(state: "ABORTED", reason: "Overall pipeline execution time too long, aborted.")
	}
} catch (Throwable t) {
	notifyFailure(mattermostChannel: "#dls-software")
	throw t
}


/**
 * Compile html-based table of check results.
 * @param setups List of setups
 * @param success Map of setup check success values
 * @return String containing compiled html document
 */
static String compileHtml(List<HXCubeWing> setups, Map<HXCubeWing, Boolean> success) {
	// Manual building of styles instead of using css classes since they are considered unsafe
	// and ignored.
	String entry_style = "border-color:black;" +
	                     "border-style:solid;" +
	                     "border-width:1px;" +
	                     "font-family:Arial, sans-serif;" +
	                     "font-size:14px;" +
	                     "font-weight:normal;" +
	                     "overflow:hidden;" +
	                     "padding:10px 5px;" +
	                     "word-break:normal;"
	String content = ""
	for (HXCubeWing setup : setups) {
		content += "<tr>\n"
		content += "<td style=\"${entry_style}text-align:center;vertical-align:top\">${setup}</td>"
		content += "<td style=\"${entry_style}text-align:center;vertical-align:top\">${setup.chipRevision}</td>"
		if (success.containsKey(setup)) {
			if (success[setup]) {
				content += "<td style=\"${entry_style}background-color:#32cb00;" +
				           "text-align:left;vertical-align:top\">OK</td>"
			} else {
				content += "<td style=\"${entry_style}background-color:#fe0000;" +
				           "text-align:left;vertical-align:top\">broken</td>"
			}
		} else {
			content += "<td style=\"${entry_style}background-color:#f8ff00;text-align:left;" +
			           "vertical-align:top\">not tested</td>"
		}
		content += "<td style=\"${entry_style}text-align:center;vertical-align:top\">${(setup.fpgaBitfileVersion != null) ? setup.fpgaBitfileVersion : ''}</td>"
		content += "<td style=\"${entry_style}text-align:center;vertical-align:top\">${(setup.fpgaBitfileBuildTime != null) ? setup.fpgaBitfileBuildTime : ''}</td>"
		content += "</tr>"
	}

	String result = """
<table style="border-collapse:collapse;border-spacing:0;">
<thead>
<tr>
<th style="${entry_style}text-align:center">Setup</th>
<th style="${entry_style}text-align:center">Chip Revision</th>
<th style="${entry_style}text-align:center">State</th>
<th style="${entry_style}text-align:center">Bitfile Version</th>
<th style="${entry_style}text-align:center">Bitfile Build Time</th>
</tr>
</thead>
${content}
</table>
"""
	return result
}
