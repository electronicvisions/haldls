#!/usr/bin/env python

from os.path import join
from waflib.extras.gtest import summary
from waflib.extras.symwaf2ic import get_toplevel_path


def depends(ctx):
    ctx('haldls', 'pyhaldls')
    ctx('halco', 'pyhalco')
    ctx('code-format')


def options(opt):
    opt.load('pytest')
    opt.load('pylint')
    opt.load('pycodestyle')


def configure(cfg):
    cfg.load('compiler_cxx')
    cfg.load('python')
    cfg.check_python_version()
    cfg.check_python_headers()
    cfg.load('pytest')
    cfg.load('genpybind')
    cfg.load('pylint')
    cfg.load('pycodestyle')

    if cfg.env.with_pybind:
        cfg.check(
            compiler='cxx',
            features='cxx pyembed',
            uselib_store='PYBIND11LOLA',
            mandatory=True,
            header_name='pybind11/pybind11.h',
        )


def build(bld):
    if not bld.env.with_pybind:
        bld.fatal('building pylola requires pybind')

    bld(
        target='pylola_vx',
        source='../include/lola/vx/lola.h',
        genpybind_tags='lola_vx',
        features='genpybind cxx cxxshlib pyext pyembed',
        use=['lola_vx', 'pyhalco_common_files', 'pyhalco_hicann_dls_vx', 'pyhaldls_vx', 'PYBIND11LOLA'],
        install_path='${PREFIX}/lib',
        linkflags='-Wl,-z,defs'
    )

    bld(
        name='pylola_test_vx',
        tests=bld.path.ant_glob('test/*_vx.py'),
        features='use pytest pylint pycodestyle',
        use=['pylola_vx'],
        install_path='${PREFIX}/bin',
        pylint_config=join(get_toplevel_path(), "code-format", "pylintrc"),
        pycodestyle_config=join(get_toplevel_path(), "code-format", "pycodestyle"),
        test_environ=dict(TEST_PPU_PROGRAM=join(get_toplevel_path(), 'haldls', 'tests', 'sw', 'lola', 'lola_ppu_test_elf_file.bin')),
        test_timeout=120
    )

    bld.add_post_fun(summary)
