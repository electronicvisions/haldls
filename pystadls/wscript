#!/usr/bin/env python
from enum import Enum, auto
import os
from os.path import join
from waflib.extras.gtest import summary
from waflib.extras.symwaf2ic import get_toplevel_path

def options(opt):
    opt.load('pytest')
    opt.load('pylint')
    opt.load('pycodestyle')

def configure(cfg):
    cfg.load('compiler_cxx')
    cfg.load('python')
    cfg.check_python_version()
    cfg.check_python_headers()
    cfg.load('pytest')
    cfg.load('genpybind')
    cfg.load('pylint')
    cfg.load('pycodestyle')

def build(bld):
    class TestTarget(Enum):
        SOFTWARE_ONLY = auto()
        HARDWARE = auto()
        SIMULATION = auto()

    if "FLANGE_SIMULATION_RCF_PORT" in os.environ:
        bld.env.TEST_TARGET = TestTarget.SIMULATION

        try:
            chip_revision = int(os.environ.get("SIMULATED_CHIP_REVISION"))
        except TypeError:
            raise BuildError("Environment variable 'SIMULATED_CHIP_REVISION' "
                             "not set or cannot be casted to integer.")
        bld.env.CURRENT_SETUP = dict(chip_revision=chip_revision)
    elif "SLURM_HWDB_ENTRIES" in os.environ:
        bld.env.TEST_TARGET = TestTarget.HARDWARE
        slurm_licenses = os.environ.get("SLURM_HARDWARE_LICENSES")
        hwdb_entries = os.environ.get("SLURM_HWDB_ENTRIES")
        fpga_id = int(re.match(r"W(?P<wafer>\d+)F(?P<fpga>\d+)",
                               slurm_licenses)["fpga"])
        bld.env.CURRENT_SETUP = yaml.full_load(hwdb_entries)["fpgas"][fpga_id]
    else:
        bld.env.TEST_TARGET = TestTarget.SOFTWARE_ONLY
        bld.env.CURRENT_SETUP = dict(chip_revision=None)

    if not bld.env.with_pybind:
        bld.fatal('building pyhaldls requires pybind')

    bld(
        features='cxx pyembed',
        target='pystadls_vx_v1_obj',
        source='../src/stadls/vx/v1/pystadls.cpp',
        use='stadls_vx_v1',
    )

    bld(
        features='cxx pyembed',
        target='pystadls_vx_v2_obj',
        source='../src/stadls/vx/v2/pystadls.cpp',
        use='stadls_vx_v2',
    )

    bld(
        target='pystadls_vx_v1',
        source='../include/stadls/vx/v1/pystadls.h',
        genpybind_tags=['stadls_vx', 'stadls_vx_v1'],
        features='genpybind cxx cxxshlib pyext pyembed apply_semaphore',
        use=['stadls_vx_v1', 'pyhalco_hicann_dls_vx_v1',
             'pyhaldls_vx_v1', 'pystadls_vx_v1_obj', 'pyhxcomm_vx'],
        install_path='${PREFIX}/lib',
        linkflags='-Wl,-z,defs',
        semaphore=bld.env['stadls_semaphore'],
    )

    bld(
        target='pystadls_vx_v2',
        source='../include/stadls/vx/v2/pystadls.h',
        genpybind_tags=['stadls_vx', 'stadls_vx_v2'],
        features='genpybind cxx cxxshlib pyext pyembed apply_semaphore',
        use=['stadls_vx_v2', 'pylogging', 'pyhalco_hicann_dls_vx_v2',
             'pyhaldls_vx_v2', 'pystadls_vx_v2_obj', 'pyhxcomm_vx'],
        install_path='${PREFIX}/lib',
        linkflags='-Wl,-z,defs',
        semaphore=bld.env['stadls_semaphore'],
    )

    bld(
        name='pystadls_pbgenerator_vx_v1',
        tests='test/pystadls_pbgenerator_vx_v1.py',
        features='use pytest pylint pycodestyle',
        use=['pystadls_vx_v1'],
        install_path='${PREFIX}/bin',
        pylint_config=join(get_toplevel_path(), "code-format", "pylintrc"),
        pycodestyle_config=join(get_toplevel_path(), "code-format", "pycodestyle"),
        test_timeout=120
    )

    bld(
        name='pystadls_pbgenerator_vx_v2',
        tests='test/pystadls_pbgenerator_vx_v2.py',
        features='use pytest pylint pycodestyle',
        use=['pystadls_vx_v2'],
        install_path='${PREFIX}/bin',
        pylint_config=join(get_toplevel_path(), "code-format", "pylintrc"),
        pycodestyle_config=join(get_toplevel_path(), "code-format", "pycodestyle"),
        test_timeout=120
    )

    bld(
        name='pystadls_swtest_vx_v1',
        tests='test/pystadls_swtest_vx_v1.py',
        features='use pytest pylint pycodestyle',
        use=['pyhalco_hicann_dls_vx_v1', 'pystadls_vx_v1', 'pyhaldls_vx_v1', 'pyhalco_common_files', 'pyhxcomm_vx'],
        install_path='${PREFIX}/bin',
        pylint_config=join(get_toplevel_path(), "code-format", "pylintrc"),
        pycodestyle_config=join(get_toplevel_path(), "code-format", "pycodestyle"),
        test_timeout=120
    )

    bld(
        name='pystadls_swtest_vx_v2',
        tests='test/pystadls_swtest_vx_v2.py',
        features='use pytest pylint pycodestyle',
        use=['pyhalco_hicann_dls_vx_v2', 'pystadls_vx_v2', 'pyhaldls_vx_v2', 'pyhalco_common_files', 'pyhxcomm_vx'],
        install_path='${PREFIX}/bin',
        pylint_config=join(get_toplevel_path(), "code-format", "pylintrc"),
        pycodestyle_config=join(get_toplevel_path(), "code-format", "pycodestyle"),
        test_timeout=120
    )

    bld(
        name='pystadls_hwtest_vx_v1',
        tests='test/pystadls_hwtest_vx_v1.py',
        features='use pytest pylint pycodestyle',
        use=['pyhalco_hicann_dls_vx_v1', 'pystadls_vx_v1', 'pyhaldls_vx_v1', 'pyhalco_common_files', 'pyhxcomm_vx'],
        install_path='${PREFIX}/bin',
        pylint_config=join(get_toplevel_path(), "code-format", "pylintrc"),
        pycodestyle_config=join(get_toplevel_path(), "code-format", "pycodestyle"),
        skip_run = not (bld.env.TEST_TARGET == TestTarget.HARDWARE and
                        int(bld.env.CURRENT_SETUP["chip_revision"]) == 1),
        test_timeout=120
    )

    bld(
        name='pystadls_hwtest_vx_v2',
        tests='test/pystadls_hwtest_vx_v2.py',
        features='use pytest pylint pycodestyle',
        use=['pyhalco_hicann_dls_vx_v2', 'pystadls_vx_v2', 'pyhaldls_vx_v2', 'pyhalco_common_files', 'pyhxcomm_vx'],
        install_path='${PREFIX}/bin',
        pylint_config=join(get_toplevel_path(), "code-format", "pylintrc"),
        pycodestyle_config=join(get_toplevel_path(), "code-format", "pycodestyle"),
        skip_run = not (bld.env.TEST_TARGET == TestTarget.HARDWARE and
                        int(bld.env.CURRENT_SETUP["chip_revision"]) == 2),
        test_timeout=120
    )

    bld.add_post_fun(summary)
