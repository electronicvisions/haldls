#!/usr/bin/env python
from enum import Enum, auto
import os
from os.path import join
import re
import yaml
from waflib.Errors import BuildError
from waflib.extras.gtest import summary
from waflib.extras.symwaf2ic import get_toplevel_path

def options(opt):
    opt.load('pytest')
    opt.load('pylint')
    opt.load('pycodestyle')

def configure(cfg):
    cfg.load('compiler_cxx')
    cfg.load('python')
    cfg.check_python_version()
    cfg.check_python_headers()
    cfg.load('pytest')
    cfg.load('genpybind')
    cfg.load('pylint')
    cfg.load('pycodestyle')

def build(bld):
    class TestTarget(Enum):
        SOFTWARE_ONLY = auto()
        HARDWARE = auto()
        SIMULATION = auto()

    if "FLANGE_SIMULATION_RCF_PORT" in os.environ:
        bld.env.TEST_TARGET = TestTarget.SIMULATION

        try:
            chip_revision = int(os.environ.get("SIMULATED_CHIP_REVISION"))
        except TypeError:
            raise BuildError("Environment variable 'SIMULATED_CHIP_REVISION' "
                             "not set or cannot be casted to integer.")
        bld.env.CURRENT_SETUP = dict(chip_revision=chip_revision)
    elif "SLURM_HWDB_YAML" in os.environ:
        bld.env.TEST_TARGET = TestTarget.HARDWARE
        slurm_licenses = os.environ.get("SLURM_HARDWARE_LICENSES")
        hwdb_entries = os.environ.get("SLURM_HWDB_YAML")
        fpga_id = int(re.match(r"W(?P<wafer>\d+)F(?P<fpga>\d+)",
                               slurm_licenses)["fpga"])
        fpgas = yaml.full_load(hwdb_entries)["fpgas"]
        fpga = None
        for entry in fpgas:
            if entry["fpga"] == fpga_id:
                fpga = entry
                break
        if not fpga:
            raise BuildError("FPGA not found in hwdb")
        bld.env.CURRENT_SETUP = fpga
    else:
        bld.env.TEST_TARGET = TestTarget.SOFTWARE_ONLY
        bld.env.CURRENT_SETUP = dict(chip_revision=None)

    if not bld.env.with_pybind:
        bld.fatal('building pyhaldls requires pybind')

    for hx_version in [2, 3]:
        bld(
            features='cxx pyext',
            target=f'pystadls_vx_v{hx_version}_obj',
            source=[f'../src/stadls/vx/v{hx_version}/pystadls.cpp',
                    f'../src/stadls/vx/playback_generator.cpp'],
            use=[f'stadls_vx_v{hx_version}', 'pyhxcomm_vx'],
            defines=['__GENPYBIND_GENERATED__'],
        )

        bld(
            target=f'pystadls_vx_v{hx_version}',
            source=f'../include/stadls/vx/v{hx_version}/pystadls.h',
            genpybind_tags=['stadls_vx', f'stadls_vx_v{hx_version}'],
            features='genpybind cxx cxxshlib pyext apply_semaphore',
            use=[f'stadls_vx_v{hx_version}', f'pyhalco_hicann_dls_vx_v{hx_version}',
                 f'pyhaldls_vx_v{hx_version}', f'pylola_vx_v{hx_version}',
                 f'pystadls_vx_v{hx_version}_obj', 'pyhxcomm_vx'],
            install_path='${PREFIX}/lib',
            semaphore=bld.env['stadls_semaphore'],
        )

        bld(
            name=f'pystadls_pbgenerator_vx_v{hx_version}',
            tests=f'test/pystadls_pbgenerator_vx_v{hx_version}.py',
            features='use pytest pylint pycodestyle',
            use=[f'pystadls_vx_v{hx_version}'],
            install_path='${PREFIX}/bin',
            pylint_config=join(get_toplevel_path(), "code-format", "pylintrc"),
            pycodestyle_config=join(get_toplevel_path(), "code-format", "pycodestyle"),
            test_timeout=120
        )

        bld(
            name=f'pystadls_swtest_vx_v{hx_version}',
            tests=f'test/pystadls_swtest_vx_v{hx_version}.py',
            features='use pytest pylint pycodestyle',
            use=[f'pyhalco_hicann_dls_vx_v{hx_version}', f'pystadls_vx_v{hx_version}', f'pyhaldls_vx_v{hx_version}',
                 f'pyhalco_common_files', 'pyhxcomm_vx'],
            install_path='${PREFIX}/bin',
            pylint_config=join(get_toplevel_path(), "code-format", "pylintrc"),
            pycodestyle_config=join(get_toplevel_path(), "code-format", "pycodestyle"),
            test_timeout=120
        )

        bld(
            name=f'pystadls_hwtest_vx_v{hx_version}',
            tests=f'test/pystadls_hwtest_vx_v{hx_version}.py',
            features='use pytest pylint pycodestyle',
            use=[f'pyhalco_hicann_dls_vx_v{hx_version}', f'pystadls_vx_v{hx_version}', f'pyhaldls_vx_v{hx_version}',
                 'pyhalco_common_files', 'pyhxcomm_vx', 'pylogging'],
            install_path='${PREFIX}/bin',
            pylint_config=join(get_toplevel_path(), "code-format", "pylintrc"),
            pycodestyle_config=join(get_toplevel_path(), "code-format", "pycodestyle"),
            skip_run = not (bld.env.TEST_TARGET == TestTarget.HARDWARE and
                            int(bld.env.CURRENT_SETUP["chip_revision"]) == hx_version),
            test_timeout=120
        )

    bld.add_post_fun(summary)
